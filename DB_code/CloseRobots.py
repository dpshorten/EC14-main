#This function contains the code for the looping arena

def CloseRobots (distance, waittime, childtime, arena_width, arena_height):
#This function does not return any data, but calculates the new children and places them in the database.
#After that it will put in all the new robot data into the overall database.

	import MySQLdb
 	mdb = MySQLdb.connect(...)
 	cur = mdb.cursor()

 	timestep = 0
	
	#Select the maximum ID to know what ID the next child must get
	cur.execute(“SELECT MAX(RobotID)+1 AS MaxID FROM RobotLocationData”)
 	childID = cur.fetchone()
	
	#Select all already simulated robots that are close by the robot in the NewRobotLocationData database
	#And put them into table Closeby
 	cur.execute(“INSERT INTO CloseBy (RobotID, timestep, x, y, NewID, Newx, Newy) SELECT RobotID, timestep, x, y, NewID, Newx, Newy FROM RobotLocationData JOIN NewRobotLocationData ON timestep = newtime WHERE child = 0 AND newchild = 0 AND ( SQRT( (CASE WHEN ABS(x-newx)<=%d THEN (ABS(x-newx))^2 ELSE (ABS(ABS(x-newx)-%s))^2 END)+(CASE WHEN ABS(y-newy)<=%d THEN (ABS(y-newy))^2 ELSE (ABS(ABS(y-newy)-%s))^2 END) ) <= %d) GROUP BY RobotID, timestep, NewID, x, y, Newx, Newy”,(distance,arena_width,distance,arena_height,distance))

	#Select all different parents and loop each meeting time of those parents to seek out the timesteps that children were created
 	cur.execute(“SELECT DISTINCT RobotID FROM CloseBy”)
 	ParentIDs = cur.fetchall()
 	for ParentID in ParentIDs:
  		timestep = 0
  		cur.execute(“SELECT RobotID, timestep, x, y, NewID, Newx, Newy FROM CloseBy WHERE RobotID = %s”, ParentID)
  		matingtimes = cur.fetchall()
   
  		for matingtime in matingtimes:
   			row = matingtime
   			if row[1] >= timestep:
				#insert new child generated by parents RobotID and NewID
    				cur.execute(“INSERT INTO NewChildren (ChildID, ParentOne, ParentTwo, timestep, HNeat) VALUES (%s,%s,%s,0)”, (childID,row[0],row[4],row[1]))

    				#insert new child into overall database
				cur.execute(“INSERT INTO RobotLocationData (RobotID, timestep, x, y, z, child, HNeat, VCad) VALUES (%s,%s,%d,%d,0,1,0,0)”, (childID,row[1],(row[2]+row[5])/2,(row[3]+row[6])/2))
				
				#Update the timestep for which you are looking for a new child that is born
				timestep = row[1]+1+waittime
				childID = childID+1
  
	#Set the VoxCad Marker of the simulated robot to 1
	cur.execute("UPDATE RobotLocationData Set VCad = 1 WHERE RobotID = (SELECT DISTINCT ID FROM NewRobotLocationData)")

	#Put all data from NewRobotLocationData into RobotLocationData
	#Hyperneat and Voxcad markers are set to 1
 	cur.execute(“SELECT ID, timestep, x, y, z FROM NewRobotLocationData GROUP BY timestep HAVING timestep > MIN(timestep)”)
 	new = cur.fetchall()
 	for time in new:
  		row = time
  		cur.execute(“INSERT INTO RobotLocationData (RobotID, timestep, x, y, z, child, HNeat, VCad) VALUES (%s,%s,%d,%d,0,%s,1,1)”, (row[0],row[1],row[2],row[3],row[4]))
 
 	cur.execute(“DELETE FROM NewRobotLocationData”)

	cur.close()
	mdb.close()
