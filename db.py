import mysql.connector

class DB():
    cur = False
    con = False
    def __init__(self, connectionString):
        components = connectionString.split("@")
        if (len(components) != 2):
            raise ValueError("connection string did have more or less than 1 @ symbol")

        auth = components[0].split(":")
        hostdb = components[1].split("/")
        if (len(auth) != 2):
            raise ValueError("connection string did have more or less than 1 : symbol")
        if (len(hostdb) != 2):
            raise ValueError("connection string did have more or less than 1 / symbol")

        config = {
          'user': auth[0],
          'password': auth[1],
          'host': hostdb[0],
          'database': hostdb[1],
          'raise_on_warnings': True,
        }

        self.con = mysql.connector.connect(**config)
        self.cur = self.con.cursor()

    def test(self):
        #TODO: test db connection
        pass

    def close(self):
        self.con.close()


    def createTables ():
        import MySQLdb
        mdb = MySQLdb.connect(...)
        cur = mdb.cursor()
        cur.execute("CREATE TABLE RobotLocationData(RobotID int, timestep int, x float, y float, z float, child int, HNeat int, VCad int, JobID int)")
        cur.execute("CREATE TABLE NewRobotLocationData(ID int, timestep int, x float, y float, z float, child int)")
        cur.execute("CREATE TABLE CloseBy (RobotID int, timestep int, x float, y float, NewID int, Newx float, Newy float)")
        cur.execute("CREATE TABLE NewChildren (ChildID, ParentOne int, ParentTwo int, timestep int, HNeat int)")

    def GetNextChildrenVoxCad(endtime):
    #This function returns rows of children that are ready to be simulated: RobotID, timestep, x, y, z
        import MySQLdb
        mdb = MySQLdb.connect(...)
        cur = mdb.cursor()

        #Select all children (child = 1) that have been generated by hyperneat (HNeat = 1), but have not been simulated yet (VCad = 0)
        cur.execute("SELECT CAST(RobotID AS nvarchar(9))+'.xml' AS RobotID, timestep, x, y, z FROM RobotLocationData WHERE timestep < %s AND child = 1 AND HNeat = 1 AND VCad = 0", endtime)
        childrenVoxCad = cur.fetchall()

        cur.close()
        mdb.close()

        return childrenVoxCad

    def GetNextChildrenHyperNEAT(endtime):
    #This function returns rows of children that are ready to be generated by HyperNEAT: ChildID, firstID, secondID
        import MySQLdb
        mdb = MySQLdb.connect(...)
        cur = mdb.cursor()

        #Get all children from table NewChildren that have to be generated
        cur.execute("SELECT CAST(ChildID AS nvarchar(9))+'.xml' As ChildID, CAST(ParentOne AS nvarchar(9))+'.xml' AS ParentOne, CAST(ParentTwo AS nvarchar(9))+'.xml' AS ParentTwo FROM NewChildren WHERE HNeat = 0 AND timestep < %s", endtime)
        children = cur.fetchall()

        #Update the RobotLocationData table with the HyperNeat marker for the children
        cur.execute("UPDATE RobotLocationData SET HNeat = 1 WHERE RobotID IN (SELECT ChildID FROM NewChildren WHERE HNeat = 0 AND timestep < %s)", endtime)

        #Update Hyperneat marker for all children that were returned by the last statement
        cur.exectue("UPDATE NewChildData SET HNeat = 1 WHERE HNeat = 0 AND timestep < %s", endtime)

        cur.close()
        mdb.close()

        return children

    def InputInitialPopulationData(data):
    #This function does not return any data.
    #Insert the initial population (robots not yet simulated) into table RobotLocationData

        import MySQLdb
        mdb = MySQLdb.connect(...)
        cur = mdb.cursor()

        for row in data:
            #change parts of the code to fit in the data parameter
            IntID = row[0]
            IntID = IntID[0:5]
    #CHANGE START
            cur.execute("INSERT INTO RobotLocationData (RobotID, timestep, x, y, z, child, HNeat, VCad, JobID) VALUES (%s,%s,%d,%d,%d,1,1,0,0)", (IntID,row[1],row[2],row[3],row[4]))
    #CHANGE END
        cur.close()
        mdb.close()

