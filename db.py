import mysql.connector


class DB():
    cur = False
    con = False

    def __init__(self, connectionString):
        components = connectionString.split("@")
        if (len(components) != 2):
            raise ValueError("connection string did have more or less than 1 @ symbol")

        auth = components[0].split(":")
        hostdb = components[1].split("/")
        if (len(auth) != 2):
            raise ValueError("connection string did have more or less than 1 : symbol")
        if (len(hostdb) != 2):
            raise ValueError("connection string did have more or less than 1 / symbol")

        config = {
            'user': auth[0],
            'password': auth[1],
            'host': hostdb[0],
            'database': hostdb[1],
            'raise_on_warnings': True,
        }

        self.con = mysql.connector.connect(**config)
        self.cur = self.con.cursor()

    def test(self):
        # TODO: test db connection
        pass

    def close(self):
        self.con.close()

    def getHNtodos(self):
        """ retrieve individuals that need to be created (that only exist in the database so far)
        :return: list with strings (individual names)
        """
        # TODO: implement (select everything from individuals where hyperneated = 0)
        return []

    def getVoxTodos(self):
        """ retrieve individuals that need to be voxelyzed
        :return: list with strings (individual names)
        """
        return []

    def getParents(self):
        """ get parents, if they exist, for a given individual
        :return: list of strings (parent IDs), length of this list is either 0, 1 or 2, for no parents, has been mutated from 1 parent and was created by mating,
        """
        # TODO: implement
        return []

    def markAsHyperneated(self, indiv):
        """ marks the individual as been processed by HyperNEAT. I.e. an actual file was created from database
        :param indiv: string, ID of an individual
        :return: None
        """
        # TODO: implement


    # ##################PETER FUNCTIONS



    def createTables(self):
        # self.cur.execute(
        #     "CREATE TABLE RobotLocationData(RobotID int, timestep int, x float, y float, z float, child int, HNeat int, VCad int, JobID int)")
        # self.cur.execute(
        #     "CREATE TABLE NewRobotLocationData(ID int, timestep int, x float, y float, z float, child int)")
        # self.cur.execute(
        #     "CREATE TABLE CloseBy (RobotID int, timestep int, x float, y float, NewID int, Newx float, Newy float)")
        # self.cur.execute("CREATE TABLE NewChildren (ChildID, ParentOne int, ParentTwo int, timestep int, HNeat int)")
        pass


    def GetNextChildrenVoxCad(self, endtime):
        #This function returns rows of children that are ready to be simulated: RobotID, timestep, x, y, z
        #Select all children (child = 1) that have been generated by hyperneat (HNeat = 1), but have not been simulated yet (VCad = 0)
        self.cur.execute(
            "SELECT CAST(RobotID AS nvarchar(9))+'.xml' AS RobotID, timestep, x, y, z FROM RobotLocationData WHERE timestep < %s AND child = 1 AND HNeat = 1 AND VCad = 0",
            endtime)
        childrenVoxCad = self.cur.fetchall()

        return childrenVoxCad

    def GetNextChildrenHyperNEAT(self, endtime):
        #This function returns rows of children that are ready to be generated by HyperNEAT: ChildID, firstID, secondID

        #Get all children from table NewChildren that have to be generated
        self.cur.execute(
            "SELECT CAST(ChildID AS nvarchar(9))+'.xml' As ChildID, CAST(ParentOne AS nvarchar(9))+'.xml' AS ParentOne, CAST(ParentTwo AS nvarchar(9))+'.xml' AS ParentTwo FROM NewChildren WHERE HNeat = 0 AND timestep < %s",
            endtime)
        children = self.cur.fetchall()

        #Update the RobotLocationData table with the HyperNeat marker for the children
        self.cur.execute(
            "UPDATE RobotLocationData SET HNeat = 1 WHERE RobotID IN (SELECT ChildID FROM NewChildren WHERE HNeat = 0 AND timestep < %s)",
            endtime)

        #Update Hyperneat marker for all children that were returned by the last statement
        self.cur.exectue("UPDATE NewChildData SET HNeat = 1 WHERE HNeat = 0 AND timestep < %s", endtime)

        return children

    def InputInitialPopulationData(self, data):
        #This function does not return any data.
        #Insert the initial population (robots not yet simulated) into table RobotLocationData


        for row in data:
            #change parts of the code to fit in the data parameter
            IntID = row[0]
            IntID = IntID[0:5]
            self.cur.execute(
                "INSERT INTO RobotLocationData (RobotID, timestep, x, y, z, child, HNeat, VCad, JobID) VALUES (%s,%s,%d,%d,%d,1,1,0,0)",
                (IntID, row[1], row[2], row[3], row[4]))

